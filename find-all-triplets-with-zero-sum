#User function Template for python3
class Solution:
    def findTriplets(self, arr):
        # Your code here
        from collections import defaultdict 

        n = len(arr)
        # Dictionary to store pairs of indices that add up to a specific sum
        pair_sum_dict = defaultdict(list)
        
        # Populate the dictionary with pairs and their sums
        for i in range(n):
            for j in range(i + 1, n):
                pair_sum = arr[i] + arr[j]
                # Add the pair (i, j) for the current sum `pair_sum`
                pair_sum_dict[pair_sum].append([i, j])
        
        # List to store the unique triplets
        result = []
        # Set to track unique triplets by their sorted tuple of indices
        visited_triplets = set()
        
        # Iterate through each element in `arr` to find possible triplets
        for i in range(n):
            target = -arr[i]  # We need to find pairs that sum up to `-arr[i]`
            
            # Check if there are pairs that sum up to `target`
            if target in pair_sum_dict:
                # Go through each pair that sums to `target`
                for a, b in pair_sum_dict[target]:
                    # Ensure all indices are unique to form a valid triplet
                    if i != a and i != b:
                        # Sort the indices to maintain order i < j < k
                        triplet = sorted([i, a, b])
                        
                        # Check if the sorted triplet is in the correct order and not visited
                        if triplet[0] < triplet[1] < triplet[2] and tuple(triplet) not in visited_triplets:
                            # Add the sorted triplet to the result list
                            result.append(triplet)
                            # Mark this triplet as visited by adding it to the set
                            visited_triplets.add(tuple(triplet))
        
        return result
