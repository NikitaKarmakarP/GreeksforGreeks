class Solution {
  public:
    int minJumps(vector<int>& arr) {
         int n = arr.size();
    
    // Edge case: if the first element is 0 and the array has more than one element, we can't move.
    if (n == 1) return 0;
    if (arr[0] == 0) return -1;

    int jumps = 0;          // Number of jumps needed
    int current_end = 0;     // End of the range for the current jump
    int farthest = 0;        // Farthest point we can reach with the next jump

    for (int i = 0; i < n - 1; ++i) {
        farthest = std::max(farthest, i + arr[i]);
        
        // If we have reached the end of the current jump range
        if (i == current_end) {
            jumps++;
            current_end = farthest;
            
            // If the current end reaches or exceeds the last index, we're done
            if (current_end >= n - 1) {
                return jumps;
            }
        }
        
        // If farthest is less than or equal to current index, it's impossible to reach the end
        if (farthest <= i) return -1;
    }
    
    return -1;  // If we exit the loop, reaching the end is not possible
}

int main() {
    std::vector<int> arr1 = {1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9};
    std::cout << "Minimum jumps: " << minJumps(arr1) << std::endl;  // Output: 3
    
    std::vector<int> arr2 = {1, 4, 3, 2, 6, 7};
    std::cout << "Minimum jumps: " << minJumps(arr2) << std::endl;  // Output: 2
    
    std::vector<int> arr3 = {0, 10, 20};
    std::cout << "Minimum jumps: " << minJumps(arr3) << std::endl;  // Output: -1

    return 0;

    }
};
