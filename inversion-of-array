int mergeAndCount(vector<int>& arr, int left, int mid, int right) {
        // Sizes of two subarrays
        int leftSize = mid - left + 1;
        int rightSize = right - mid;

        // Temporary arrays
        vector<int> leftArr(leftSize), rightArr(rightSize);

        // Copy data to temporary arrays
        for (int i = 0; i < leftSize; i++)
            leftArr[i] = arr[left + i];
        for (int j = 0; j < rightSize; j++)
            rightArr[j] = arr[mid + 1 + j];

        // Merge the temporary arrays back into arr[left..right]
        int i = 0, j = 0, k = left;
        int inversionCount = 0;

        while (i < leftSize && j < rightSize) {
            if (leftArr[i] <= rightArr[j]) {
                arr[k++] = leftArr[i++];
            } else {
                // There are leftSize - i inversions, because all remaining elements
                // in leftArr (from i to end) are greater than rightArr[j]
                arr[k++] = rightArr[j++];
                inversionCount += (leftSize - i);
            }
        }

        // Copy remaining elements of leftArr, if any
        while (i < leftSize) {
            arr[k++] = leftArr[i++];
        }

        // Copy remaining elements of rightArr, if any
        while (j < rightSize) {
            arr[k++] = rightArr[j++];
        }

        return inversionCount;
    }

    int mergeSortAndCount(vector<int>& arr, int left, int right) {
        int inversionCount = 0;
        if (left < right) {
            int mid = left + (right - left) / 2;

            // Count inversions in the left and right halves
            inversionCount += mergeSortAndCount(arr, left, mid);
            inversionCount += mergeSortAndCount(arr, mid + 1, right);

            // Count cross inversions and merge the two halves
            inversionCount += mergeAndCount(arr, left, mid, right);
        }
        return inversionCount;
    }

    int inversionCount(vector<int>& arr) {
        return mergeSortAndCount(arr, 0, arr.size() - 1);
