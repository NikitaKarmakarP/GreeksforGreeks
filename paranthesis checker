class Solution {
  public:
    bool isParenthesisBalanced(string& s) {
        // code here
                stack<char> st;  // Stack to store opening brackets
        unordered_map<char, char> matchingBracket = {
            {')', '('}, 
            {'}', '{'}, 
            {']', '['}
        };

        // Iterate over each character in the string
        for (char c : s) {
            if (matchingBracket.count(c)) {
                // If the character is a closing bracket
                if (st.empty() || st.top() != matchingBracket[c]) {
                    return false;  // Stack is empty or mismatched bracket
                }
                st.pop();  // Pop the matching opening bracket
            } else {
                // If the character is an opening bracket
                st.push(c);
            }
        }

        // If the stack is empty, the expression is balanced
        return st.empty();

    }
};
