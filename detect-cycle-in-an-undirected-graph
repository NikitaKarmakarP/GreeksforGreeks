class Solution {
  private:
    bool detect(int src, vector<vector<int>> adj, vector<int>& vis){
        vis[src] = 1;
        queue<pair<int,int>>q;
        q.push({src, -1});
        while(!q.empty()){
            int node = q.front().first;
            int parent = q.front().second;
            q.pop();
            for(auto i : adj[node]){
                if(!vis[i]){
                    vis[i] = 1;
                    q.push({i, node});
                }
                else if(parent != i) {
                     return true;
                }
            }
        }
        return false;
    }
  public:
    // Function to detect cycle in an undirected graph.
    bool isCycle(vector<vector<int>> adj) {
        // Code here
        int V = adj.size();
        vector<int> vis(V,0);
        for(int i = 0; i < V;i++){
            if(!vis[i]){
                if(detect(i, adj,vis))
                return true;
            }
        }return false;
    }
};
