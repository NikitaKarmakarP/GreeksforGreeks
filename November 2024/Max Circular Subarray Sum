

class Solution {

    // a: input array
    // n: size of array
    // Function to find maximum circular subarray sum.
    public int circularSubarraySum(int arr[]) {

        // Your code here
         int n = arr.length;
        
        // Calculate maximum sum of subarray for normal array
        int max_kadane = kadaneAlgorithm(arr, n);
        
        // Calculate total sum of array
        int total_sum = 0;
        for (int i = 0; i < n; i++) {
            total_sum += arr[i];
        }
        
        // Calculate maximum sum of subarray for circular array
        int max_wrap = total_sum + kadaneAlgorithm(invert(arr, n), n);
        
        // Return maximum of both cases
        return Math.max(max_kadane, max_wrap);
    }
    
    // Function to implement Kadane's algorithm
    public int kadaneAlgorithm(int arr[], int n) {
        int max_so_far = arr[0];
        int max_ending_here = arr[0];
        
        for (int i = 1; i < n; i++) {
            max_ending_here = Math.max(arr[i], max_ending_here + arr[i]);
            max_so_far = Math.max(max_so_far, max_ending_here);
        }
        
        return max_so_far;
    }
    
    // Function to invert the array (i.e., multiply all elements by -1)
    public int[] invert(int arr[], int n) {
        int inverted_arr[] = new int[n];
        
        for (int i = 0; i < n; i++) {
            inverted_arr[i] = -arr[i];
        }
        
        return inverted_arr;
    }
}
