class Solution {
  public:
    // arr : given array
    // k : find kth smallest element and return using this function
    
        int partition(vector<int>& arr, int left, int right) {
        int pivot = arr[right];
        int i = left - 1;
        for (int j = left; j < right; j++) {
            if (arr[j] <= pivot) {
                i++;
                swap(arr[i], arr[j]);
            }
        }
        swap(arr[i + 1], arr[right]);
        return i + 1;
    }

    int quickselect(vector<int>& arr, int left, int right, int k) {
        if (left <= right) {
            int pivotIndex = partition(arr, left, right);
            
            // If the pivot is in the kth position
            if (pivotIndex == k) {
                return arr[pivotIndex];
            }
            // If k is less, search in the left part
            else if (pivotIndex > k) {
                return quickselect(arr, left, pivotIndex - 1, k);
            }
            // If k is greater, search in the right part
            else {
                return quickselect(arr, pivotIndex + 1, right, k);
            }
        }
        return -1; // Just in case, though the input guarantees k is valid
    }

    int kthSmallest(vector<int>& arr, int k) {
        return quickselect(arr, 0, arr.size() - 1, k - 1); 
    }
};
